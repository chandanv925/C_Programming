00. Reverse the array

void reverse(int* nums, int start, int end) {
    while (start < end) {
        int temp = nums[start];
        nums[start] = nums[end];
        nums[end] = temp;
        start++;
        end--;
    }
}
reverse(nums, 0, numsSize - 1);

========================================================
00. Remove Duplicates from Sorted Array

int removeDuplicates(int* nums, int numsSize) {
    int i, count = 0;
    nums[count++] = nums[0];
    for(i = 1; i < numsSize; i++){
        if(nums[i] != nums[i-1]){
            nums[count++] = nums[i];
        }
    }
    return count;
}
========================================================
00. Find Second Max in a arrays 

int findSecondMax(int arr[], int len) {

    int max = arr[0] > arr[1] ? arr[0] : arr[1];
    int second_max = arr[0] > arr[1] ? arr[1] : arr[0];

    for (int i = 2; i < len; i++) {
        if (arr[i] > max) {
            second_max = max;
            max = arr[i];
        } else if (arr[i] > second_max && arr[i] != max) {
            second_max = arr[i];
        }
    }

    return second_max;
}
========================================================
00. Concatenating two integer arrays in 

int *conct_array(int *array1, int *array2, int l1, int l2){
    int *newarray = (int *)malloc((l1 + l2) * sizeof(int));
    int index = 0;
    for(int i = 0; i < l1; i++){
        newarray[index++] = array1[i];
    }
    for(int j = 0; j < l2; j++ ){
        newarray[index++] = array2[j];
    }
    return newarray;


}

========================================================
00. Delete val from an array
 
int removeElement(int* arry, int len, int val, int val2) {
    int newlen = 0; 
    for (int i = 0; i < len; i++) {
        if ((arry[i] != val) && (arry[i] != val2) ) {
            arry[newlen++] = arry[i];  // Only copy elements that are not equal to val
        }
    }
	return newlen;
}

========================================================
00. Delete Duplicate

int remove_duplicates(int arr[], int n) {
    int i, j, count = 0;

    // Iterate through the array and remove duplicates
    for (i = 0; i < n; i++) {
        // Check if the current element has already been seen
        int is_duplicate = 0;
        for (j = 0; j < i; j++) {
            if (arr[j] == arr[i]) {
                is_duplicate = 1;
                break;
            }
        }
        // If the element is not a duplicate, keep it in the array
        if (!is_duplicate) {
            arr[count++] = arr[i];
        }
    }

    return count;
}

========================================================
00. Array Rotation: Rotate elements of an array to the left or right by a given number of positions.

void rotate_arrayL(int array[], int length, int rotateby) {
    rotateby %= length;
    for (int i = 0; i < rotateby; i++) {
        int temp = array[0];
        for (int j = 0; j < length - 1; j++) { 
            array[j] = array[j + 1];
        }
        array[length - 1] = temp;
    }
}

void rotate_arrayR(int array[], int length, int rotateby) {
    rotateby %= length;
    for (int i = 0; i < rotateby; i++) {
        int temp = array[length-1];
        for (int j = length; j > 0 ; j--) {
            array[j] = array[j - 1];
			
        }
        array[0] = temp;
    }
}

========================================================
00. Binary Search: Implement the binary search algorithm to search for an element in a sorted array.

bool BinSearch(int *arr, int len, int *mid, int target) {
    int low = 0, high = len - 1;


    while(low <= high) {
        *mid = (high + low) / 2;

        if(arr[*mid] == target)
            return true;
        else if(arr[*mid] > target)
            high = *mid - 1;
        else
            low = *mid + 1;
    }
    return false;
}

========================================================
00. Bubble Sort: Implement the bubble sort algorithm to sort an array of integers.

void bubble_sort(int *arr, int len){
    for(int i = 0; i < len-1; i ++){
        for(int j = 0; j < len -1 -i; j++){
            if(arr[j] > arr[j+1]){
                //swap(arr[j], arr[j+1]);
                int temp = arr[j];
                arr[j]= arr[j+1];
                arr[j+1]= temp;
            }
        }
    }
}

========================================================
00. Merge sorted array

void mergeArrays(int arr1[], int arr2[], int n1, int n2, int arr3[])
{
	int i = 0, j = 0, k = 0;
	while (i<n1 && j <n2)
	{
		if (arr1[i] < arr2[j])
			arr3[k++] = arr1[i++];
		else
			arr3[k++] = arr2[j++];
	}

	while (i < n1)
		arr3[k++] = arr1[i++];

	while (j < n2)
		arr3[k++] = arr2[j++];
}

-When we have to accomodate value in given array 

void mergeArrays(int arr1[], int arr2[], int n1, int n2){
	int i = n1-1;
	int j = n2-1;
	int k = n1+n2-1;
	
	while(i >= 0 && j >= 0){
		if(arr1[i] > arr2[j])
			arr1[k--] = arr1[i--];
		else 
			arr1[k--] = arr1[j--];
	}
	while(i >= 0){
		arr1[k--] = arr1[i--];
	}
}

========================================================
00. Selection Sort: Implement the selection sort algorithm to sort an array of integers.

void selectionSort(int arr[], int n) {
    for (int i = 0; i < n - 1; i++) {
        int min_index = i;
        for (int j = i + 1; j < n; j++) {
            if (arr[j] < arr[min_index]) {
                min_index = j;
            }
        }
		if(i != min_idx){
			// Swap arr[i] with the minimum element
			// swap(&arr[i], &arr[min_index]);
			int temp = arr[i];
			arr[i] = arr[min_index];
			arr[min_index] = temp;
		}
    }
}

========================================================
00. Function to find the majority element in an array

//code implementing the Boyer-Moore Voting Algorithm:
int majorityElement(int* nums, int numsSize) {
    int candidate = nums[0];
    int count = 1;
 
    // Step 1: Find the candidate
    for (int i = 1; i < numsSize; i++) {
        if (nums[i] == candidate) {
            count++;
        } else {
            count--;
            if (count == 0) {
                candidate = nums[i];
                count = 1;
            }
        }
    }
    // Step 2: Verify the candidate (optional, based on problem assumption)
    count = 0;
    for (int i = 0; i < numsSize; i++) {
        if (nums[i] == candidate) {
            count++;
        }
    }
    // Assumption: There is always a majority element
    return candidate;
}

========================================================
Merge Sort: Implement the merge sort algorithm to sort an array of integers.
Quick Sort: Implement the quick sort algorithm to sort an array of integers.

========================================================
String
========================================================
00. concatenating one string to the end of the other

void addStrings(char str1[], char str2[]) {
    int len1 = strlen(str1);
    int len2 = strlen(str2);

    // Resize str1 to accommodate str2
    str1[len1 + len2] = '\0';

    // Append characters of str2 to str1
    for (int i = 0; i < len2; i++) {
        str1[len1 + i] = str2[i];
    }
}
--
void addStrings(char str1[], char str2[]){
    int i = 0, j = 0;

    while(str1[i] != '\0'){
        i++;
    }
    while(str2[j] != '\0'){
        str1[i++] = str2[j++];
    }
    str1[i]='\0';

}

========================================================
00. String Length: Write a function to find the length of a string. for loop and while loop
int legth_of_string(char *str){
    int i=0;
    for(i = 0; str[i] != '\0'; i++){
    }
    return i;
}

int legth_of_string(char *str){
    int i=0;
    while (str[i] != '\0') {
        i++;
    }
    return i;
}

========================================================
00. String Concatenation: Write a function to concatenate two strings.

char *concatstr(char *str1, char* str2){
    int len1 =legth_of_string(str1);
    int len2 =legth_of_string(str2);
    printf("%d,%d\n", len1, len2);

    char *str3 = (char*)malloc((len1+len2)+1);
    int j = 0;

    for(int i = 0; i < len1; i++){
        str3[j++] = str1[i];
    }
    for(int k = 0 ; k < len2; k++){
        str3[j++] = str2[k];
    }
    str3[j]='\0';
    return str3;
}

========================================================
00. String Copy: Write a function to copy one string to another. add/append

void addStrings(char str1[], char str2[]) {
    int i = 0;
    int j = 0;
    int k = 0;


    // Move i to the end of str1
    while (str1[i] != '\0') {
        i++;
    }

    // Append characters of str2 to str1
    while (str2[j] != '\0') {
        str1[i++] = str2[j++];
    }

    // Null-terminate str1
    str1[i] = '\0';
}

========================================================
00. String Compare: Write a function to compare two strings.

void strcmp2(char *str1, char *str2){
	int len1 = strlen2(str1);
	int len2 = strlen2(str2);
	
	if (len1 != len2) 

		return false;
	
	for (int i = 0; i < len1; i++){
		if( str1[i] != str2[i])
			return false;	
	}
	return true;
}

========================================================
00. Remove Duplicate Characters: Write a function to remove duplicate characters from a string

void del_idx(char *str, int index, int len){

    for(int j = index; j < len-1; j++){
        str[j]= str[j+1];
    }
    str[len-1] = '\0';
}

void del_dup_char(char *str1){
    int len1 = legth_of_string(str1);

    for(int i = 0; i < len1-1; i++){
        char temp = str1[i];

        for(int j = i+1; j < len1; j++){
            if(str1[j] == temp){
                del_idx( str1, j, len1);
                len1--;
            }
        }
    }    
}

int main()
{
    char str1[] = "good morning ";
    char str2[] = "go0od";
    del_dup_char(str1);
    printf("%s",str1);
}

========================================================
00. Count Words in a String: Write a function to count the number of words in a string.

int countWords(char *s) {
    int count = 1; // Initialize count to 1 to account for the first word
    
    for (int i = 0; s[i] != '\0'; i++) {
        if (s[i] == ' ' && s[i + 1] != ' ') {
            count++;
        }
    }
    
    return count;
}

========================================================
00. Remove Whitespace from String: Write a function to remove whitespace characters from a string.

void del_idx(char *str, int index, int len){

    for(int j = index; j < len-1; j++){
        str[j]= str[j+1];
    }
    str[len-1] = '\0';
}

int word_count(char *str){
    int len = strlen(str);
    int count = 0, i = 0;

    for (i = 0; str[i] != '\0'; i++){
        if(str[i] == ' '){
        count++;
        del_idx( str, i, len);  
        }
    }
    return count;
}
int main(){

    char str[] = "as df gh jk jk";
    printf("space count = %d\n", word_count(str));
    printf("%s",str);


}
========================================================
00. String Palindrome with Pointers: Write a program to check if a string is a palindrome using pointers.

#include <stdio.h>
#include <string.h>
#include <ctype.h>

int isPalindrome(char *str) {
    int len = strlen(str);
    int i = 0, j = len - 1;
    
    while (i < j) {
        char left = tolower(str[i]);
        char right = tolower(str[j]);
        
        if (!isalpha(left)) {
            i++;
            continue;
        }
        if (!isalpha(right)) {
            j--;
            continue;
        }
        if (left != right) {
            return 0; // Not a palindrome
        }   
        i++;
        j--;
    }   
    return 1; // Palindrome
}

========================================================
00. Convert the string "12345" to an integer in C,

int string_to_int(const char *str) {
    int result = 0;
    int i = 0;
    int sign = 1;

    if (str[0] == '-') {
        sign = -1;
        i++;
    }
    while (str[i] != '\0') {
        // ASCII value of '0' is 48, so subtracting '0' from the character converts it to the corresponding integer
        result = result * 10 + (str[i] - '0');
        i++;
    }
    return sign * result;
}

========================================================
00. Function to strip leading and trailing whitespace from a string

void strip(char *str) {
    char *end;
    char *start = str;  // Keep track of the original start of the string

    // Trim leading space
    while (isspace((unsigned char)*str)) str++;

    if (*str == 0) { // All spaces
        *start = 0; // Set the original start to null terminator
        return;
    }

    // Trim trailing space
    end = str + strlen(str) - 1;
    while (end > str && isspace((unsigned char)*end)) end--;

    // Write new null terminator
    *(end + 1) = '\0';

    // Shift the trimmed string to the start of the original buffer
    memmove(start, str, strlen(str)+1); // +2 
	
}

========================================================

Substring Search: Write a function to find a substring within a string.
